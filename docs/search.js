window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "pycaz", "modulename": "pycaz", "kind": "module", "doc": "<p><code>pycaz</code>, a play on sounds on package, is a python package gathering the analysis tools \ndeveloped during modelling with SCHISM, but now expanded to contains all sorts of analysis \nand modelling functionalities. The original package was called (vary unoriginally) pyschism.\nHowever following the development of the toolbox by the SCHISM/NOAA called pyschism, the\nname is released for their use. The name <code>pycaz</code> comes from combination of py (short of python)\nand caz (from Bengali word \"\u0995\u09be\u099c\", which means work).</p>\n\n<div class=\"pdoc-alert pdoc-alert-danger\">\n\n<p>This toolbox is still in its major version 0. The interface might change during its \ndevelopment, caution is adviced. Please direct your advice, contribution, \nbug reports to the <a href=\"https://github.com/jamal919/pycaz\">github repository</a></p>\n\n</div>\n\n<h1 id=\"structure-of-the-package\">Structure of the package</h1>\n\n<p>The package is divided into several modules - </p>\n\n<ul>\n<li><code>schism</code> : Modules to prepare schism input/output, handle model config.</li>\n<li><code>tide</code> : Modules to handle tide data, preset for tidal analysis, supplementary function to utide.</li>\n<li><code>webdata</code> : Modules to download data from the web portals - NOAA, Copernicus etc.</li>\n<li><code>cyclone</code> : Modules to read cyclone tracks, generate wind and pressure field.</li>\n<li><code>core</code> : Data classes, currently not used and expected to be depricated.</li>\n<li><code>convert</code> : A conversion function between various units, has very limited functionalities.</li>\n</ul>\n\n<p>Each module can be imported using the standard python import commands - <code>from pycaz import &lt;module&gt;</code></p>\n\n<h1 id=\"installation\">Installation</h1>\n\n<p>The <code>pycaz</code> package depends on standard scientific python libraries - <code>numpy</code>, <code>scipy</code>, \n<code>matplotlib</code>. For map plotting <code>cartopy</code> is used. Tidal anlaysis is mostly based on <code>utide</code>.</p>\n\n<h1 id=\"how-to-use\">How to use</h1>\n\n<p>Since pycaz is a collection of heterogeneous modules, the documentation for each module\nis provided under the Submodule itself. The submodules are listed in the left pane under\nthe header <strong>Submodules</strong>.</p>\n\n<h1 id=\"license\">License</h1>\n\n<p>This toolbox is licensed under Apache License 2.0 - A permissive license whose main \nconditions require preservation of copyright and license notices. Contributors provide \nan express grant of patent rights. Licensed works, modifications, and larger works may \nbe distributed under different terms and without source code.</p>\n"}, {"fullname": "pycaz.convert", "modulename": "pycaz.convert", "kind": "module", "doc": "<p>Necessary conversion functions</p>\n\n<p>@author: khan</p>\n"}, {"fullname": "pycaz.convert.hpa2pa", "modulename": "pycaz.convert", "qualname": "hpa2pa", "kind": "function", "doc": "<p>Takes pressure value in hecta Pascal and return in Pascal.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">hpa</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "pycaz.convert.pa2mb", "modulename": "pycaz.convert", "qualname": "pa2mb", "kind": "function", "doc": "<p>Takes pressure as Pa an return in milibar (hPa)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">pa</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "pycaz.convert.knot2mps", "modulename": "pycaz.convert", "qualname": "knot2mps", "kind": "function", "doc": "<p>Takes velocity in knot and returns velocity in mps.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">knot</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "pycaz.convert.km2m", "modulename": "pycaz.convert", "qualname": "km2m", "kind": "function", "doc": "<p>Takes distance in Km and converts it to meter.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">km</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "pycaz.convert.ft2m", "modulename": "pycaz.convert", "qualname": "ft2m", "kind": "function", "doc": "<p>Takes distance in Ft and converts it to meter</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">ft</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "pycaz.convert.ntm2m", "modulename": "pycaz.convert", "qualname": "ntm2m", "kind": "function", "doc": "<p>Takes distance in Nautical mile and converts to meter.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">ntm</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "pycaz.convert.lon180", "modulename": "pycaz.convert", "qualname": "lon180", "kind": "function", "doc": "<p>Change lon range from 0-360 to -180-180</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">lon360</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "pycaz.convert.gc_distance", "modulename": "pycaz.convert", "qualname": "gc_distance", "kind": "function", "doc": "<p>Calculates the great circle distance of 'of' from 'origin'</p>\n\n<p>of: list of lon lat of the point\norigin: list of lon lat of the origin point</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">of_x</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">of_y</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">origin_x</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">origin_y</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">isradians</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycaz.core", "modulename": "pycaz.core", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pycaz.core.grid", "modulename": "pycaz.core.grid", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pycaz.core.grid.Grid", "modulename": "pycaz.core.grid", "qualname": "Grid", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "pycaz.core.grid.Grid.__init__", "modulename": "pycaz.core.grid", "qualname": "Grid.__init__", "kind": "function", "doc": "<p>Grid object to generate grid and provides function to find various\nvalues at grid points.</p>\n\n<p>x: number of rows\ny: number of columns\ndata: must be of the length len(x)*len(y). It will be flatten to get\ni,j,n formation</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "pycaz.core.grid.Grid.reshape", "modulename": "pycaz.core.grid", "qualname": "Grid.reshape", "kind": "function", "doc": "<p>Reshape the data to conform data structure.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycaz.core.grid.Grid.apply", "modulename": "pycaz.core.grid", "qualname": "Grid.apply", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">func</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycaz.core.grid.Grid.polar_coordinate", "modulename": "pycaz.core.grid", "qualname": "Grid.polar_coordinate", "kind": "function", "doc": "<p>Calculate the polar distance from a given point of interest.</p>\n\n<p>For lon,lat values, the distance is calculated using great circle distance.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">origin</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycaz.core.grid.Grid.interpolate", "modulename": "pycaz.core.grid", "qualname": "Grid.interpolate", "kind": "function", "doc": "<p>Interpolate at another x,y point or grid using scipy.interpolate.griddata</p>\n\n<p>at: {list, tuple, Grid} instance\ndepth: depth of grid data to interpolate\nmethod: {'linear', 'nearest', 'cubic'}, optional\nfill_value: value used to fill in for requested point outside of convex hull\nrescale: rescale points to unit cube before preforming interpolation</p>\n\n<p>return Grid</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">at</span>, </span><span class=\"param\"><span class=\"n\">depth</span><span class=\"o\">=</span><span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">method</span><span class=\"o\">=</span><span class=\"s1\">&#39;linear&#39;</span>, </span><span class=\"param\"><span class=\"n\">fill_value</span><span class=\"o\">=</span><span class=\"n\">nan</span>, </span><span class=\"param\"><span class=\"n\">rescale</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycaz.cyclone", "modulename": "pycaz.cyclone", "kind": "module", "doc": "<p>Cyclone module is divided into following submodules. The documentation will be updated soon.</p>\n\n<ul>\n<li><input type=\"checkbox\" class=\"task-list-item-checkbox\" disabled> jtwc\n<ul>\n<li><input type=\"checkbox\" class=\"task-list-item-checkbox\" checked disabled> function to read JTWC track files <code>read_jtwc()</code></li>\n<li><input type=\"checkbox\" class=\"task-list-item-checkbox\" disabled> function to read deck A and deck b (TODO: Implement)</li>\n</ul></li>\n<li><input type=\"checkbox\" class=\"task-list-item-checkbox\" disabled> model\n<ul>\n<li><input type=\"checkbox\" class=\"task-list-item-checkbox\" checked disabled> provides functions to compute rmax, beta etc (TODO: refactor names)</li>\n<li><input type=\"checkbox\" class=\"task-list-item-checkbox\" disabled> TODO: validate implementation</li>\n</ul></li>\n<li><input type=\"checkbox\" class=\"task-list-item-checkbox\" disabled> track\n<ul>\n<li><input type=\"checkbox\" class=\"task-list-item-checkbox\" disabled> class Record\n<ul>\n<li><input type=\"checkbox\" class=\"task-list-item-checkbox\" checked disabled> Description of the analytical field during a given time</li>\n<li><input type=\"checkbox\" class=\"task-list-item-checkbox\" disabled> TODO: Plot the analytical field</li>\n<li><input type=\"checkbox\" class=\"task-list-item-checkbox\" checked disabled> Create radial wind profile</li>\n</ul></li>\n<li><input type=\"checkbox\" class=\"task-list-item-checkbox\" disabled> class Track\n<ul>\n<li><input type=\"checkbox\" class=\"task-list-item-checkbox\" checked disabled> Compute translation speed</li>\n<li><input type=\"checkbox\" class=\"task-list-item-checkbox\" disabled> TODO: Plot with track, strength, radial field, translation speed</li>\n<li><input type=\"checkbox\" class=\"task-list-item-checkbox\" checked disabled> Interpolate/Get the cyclone description at a given time</li>\n</ul></li>\n</ul></li>\n</ul>\n"}, {"fullname": "pycaz.cyclone.jtwc", "modulename": "pycaz.cyclone.jtwc", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pycaz.cyclone.jtwc.read_jtwc", "modulename": "pycaz.cyclone.jtwc", "qualname": "read_jtwc", "kind": "function", "doc": "<p>A reader function for reading JTWC file.</p>\n\n<p>The coded fields not found on the tracks are tagged as np.nan</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">fname</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycaz.cyclone.model", "modulename": "pycaz.cyclone.model", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pycaz.cyclone.model.coriolis", "modulename": "pycaz.cyclone.model", "qualname": "coriolis", "kind": "function", "doc": "<p>Calculate the coriolis parameter</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">lat</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycaz.cyclone.model.calc_rmax_s02", "modulename": "pycaz.cyclone.model", "qualname": "calc_rmax_s02", "kind": "function", "doc": "<p>Calculates rmax as a function of central pressure as described in Silva 2002.</p>\n\n<p>mslp: float, central pressure in Pascal </p>\n\n<p>Ref: Silva,  R., G. Georges, S. Paulo, B. Gustavo and B. G. D. Gabriel (2002).\nOceanographic vulnerability to hurricanes on the Mexican coast.\nPro-ceedings of 28th Conference on Coastal Engineering, 39-51.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">mslp</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycaz.cyclone.model.calc_rmax_w04", "modulename": "pycaz.cyclone.model", "qualname": "calc_rmax_w04", "kind": "function", "doc": "<p>Calculates rmax as a function of the maximum velocity as described in \nWilloughby and Rahn (2004) paper.</p>\n\n<p>vmax: float, m/s\nlat: float, m/s</p>\n\n<p>Ref: \nWilloughby and Rahn (2004) Parametric Representation of the Primary Hurricane\nVortex. Part I: Observations andEvaluation of the Holland (1980) Model, Monthly\nWearher Review</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">vmax</span>, </span><span class=\"param\"><span class=\"n\">lat</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycaz.cyclone.model.calc_rmax_e11", "modulename": "pycaz.cyclone.model", "qualname": "calc_rmax_e11", "kind": "function", "doc": "<p>Calculate maximum radius using Emanuel 2011 model. </p>\n\n<p>v: float, known velocity information at the boundary layer, m/s\nr: float, known radial information corresponding to v, m\nvmax: float, known maximum velocity, m/s\nf: coriolis coefficient, taken at the center as it is small\nsolver: solver type -\n    fsolve: use scipy.optimize.fsolve\n    scan: use linear scanning\nlimit: limit for scanning in scan solver and limit[0] is x0 for fsolve\nstep: stepping for scan solver\nvlimit: (vmin, vmax) limit to return a result, otherwise exception thrown</p>\n\n<p>Ref: Emanuel 2011, Lin and Chavas 2012, Krien et al. 2017</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">v</span>, </span><span class=\"param\"><span class=\"n\">r</span>, </span><span class=\"param\"><span class=\"n\">vmax</span>, </span><span class=\"param\"><span class=\"n\">f</span>, </span><span class=\"param\"><span class=\"n\">solver</span><span class=\"o\">=</span><span class=\"s1\">&#39;fsolve&#39;</span>, </span><span class=\"param\"><span class=\"n\">limit</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">5000</span><span class=\"p\">,</span> <span class=\"mi\">500000</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">step</span><span class=\"o\">=</span><span class=\"mi\">100</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycaz.cyclone.model.calc_holland_B", "modulename": "pycaz.cyclone.model", "qualname": "calc_holland_B", "kind": "function", "doc": "<p>Calculates the simplified version of Holland's B parameters excluding the\nterm with coriolis.</p>\n\n<p>vmax: Velocity of maximum wind at boundary layer, m/s\npc: Central pressure, Pa\npn: environmental pressure, Pa\nrhoair: Density of air kg/m**3\nbmax: maximum limit of B\nbmin: minimum limit of B</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">vmax</span>, </span><span class=\"param\"><span class=\"n\">pc</span>, </span><span class=\"param\"><span class=\"n\">pn</span>, </span><span class=\"param\"><span class=\"n\">rhoair</span>, </span><span class=\"param\"><span class=\"n\">bmax</span><span class=\"o\">=</span><span class=\"mf\">2.5</span>, </span><span class=\"param\"><span class=\"n\">bmin</span><span class=\"o\">=</span><span class=\"mf\">0.5</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycaz.cyclone.model.calc_holland_B_full", "modulename": "pycaz.cyclone.model", "qualname": "calc_holland_B_full", "kind": "function", "doc": "<p>Calculates the holland B paramter using the full expression.</p>\n\n<p>vmax: Velocity of maximum wind at boundary layer, m/s\nrmax: radius of maximum wind, m\npc: central pressure, Pa\nf: coriolis\npn: Environmental pressure, 101325pa\nrhoair: density of air kg/m**3\nbmax: maximum limit of B\nbmin: minimum limit of B</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">vmax</span>, </span><span class=\"param\"><span class=\"n\">rmax</span>, </span><span class=\"param\"><span class=\"n\">pc</span>, </span><span class=\"param\"><span class=\"n\">f</span>, </span><span class=\"param\"><span class=\"n\">pn</span>, </span><span class=\"param\"><span class=\"n\">rhoair</span>, </span><span class=\"param\"><span class=\"n\">bmax</span><span class=\"o\">=</span><span class=\"mf\">2.5</span>, </span><span class=\"param\"><span class=\"n\">bmin</span><span class=\"o\">=</span><span class=\"mf\">0.5</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycaz.cyclone.model.calc_rmax_h80", "modulename": "pycaz.cyclone.model", "qualname": "calc_rmax_h80", "kind": "function", "doc": "<p>Solve rmax with for a given r and v using Holland 1980 model.</p>\n\n<p>v: float, velocity in m/s\nr: float, radial distance corresponding to v, in m\npc: float, central pressure, Pa\nB: float, Holland B parameter, calculable by calc_holland_B()\nf: float, coriolis parameter\nsolver: solver to use - scan or fsolve (default)\nlimit: limit for scan solver or starting point for fsolve\nstep: scan solver stepping, in m</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">v</span>,</span><span class=\"param\">\t<span class=\"n\">r</span>,</span><span class=\"param\">\t<span class=\"n\">pc</span>,</span><span class=\"param\">\t<span class=\"n\">B</span>,</span><span class=\"param\">\t<span class=\"n\">f</span>,</span><span class=\"param\">\t<span class=\"n\">pn</span>,</span><span class=\"param\">\t<span class=\"n\">rhoair</span>,</span><span class=\"param\">\t<span class=\"n\">solver</span><span class=\"o\">=</span><span class=\"s1\">&#39;fsolve&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">limit</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">5000</span><span class=\"p\">,</span> <span class=\"mi\">100000</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">step</span><span class=\"o\">=</span><span class=\"mi\">100</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycaz.cyclone.model.calc_vcirc_j92", "modulename": "pycaz.cyclone.model", "qualname": "calc_vcirc_j92", "kind": "function", "doc": "<p>Calculate circular wind speed according to Jelesnianski et al. 1992 model. \nIt is also known as SLOSH: Sea, lake, and overland surges from hurricanes\nNOAA model.</p>\n\n<p>It is a simple model, and apprently when the coriolis is neglected (f -> 0)\nEmanuel 2011 model reduces to SLOSH model.</p>\n\n<p>r: float, radial distance (m)\nRm: float, radius of maximum wind (m)\nVm: float, maximum wind speed (m/s)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">r</span>, </span><span class=\"param\"><span class=\"n\">Rm</span>, </span><span class=\"param\"><span class=\"n\">Vm</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycaz.cyclone.model.calc_vcirc_h80", "modulename": "pycaz.cyclone.model", "qualname": "calc_vcirc_h80", "kind": "function", "doc": "<p>Calculate circular wind speed based on Holland 1980 model.</p>\n\n<p>r: float, radial distance (m) where the circular wind speed is calculated\nRm: float, radius of maximum wind (m)\npc: float, central pressure\nB: float, Holland B parameter, can be calculated using calc_holland_B_full()\npn: float, nominal pressure outide of the storm\nrhoair: density of air km/m**3\nf: coriolis parameter, can be calculated with coriolis() function</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">r</span>, </span><span class=\"param\"><span class=\"n\">Rm</span>, </span><span class=\"param\"><span class=\"n\">pc</span>, </span><span class=\"param\"><span class=\"n\">B</span>, </span><span class=\"param\"><span class=\"n\">pn</span>, </span><span class=\"param\"><span class=\"n\">rhoair</span>, </span><span class=\"param\"><span class=\"n\">f</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycaz.cyclone.model.calc_vcirc_h80c", "modulename": "pycaz.cyclone.model", "qualname": "calc_vcirc_h80c", "kind": "function", "doc": "<p>Holland 1980 model with cyclostropic approximation. In this approximation\nall the terms related to coriolis is neglected (f->0)</p>\n\n<p>r: float, radial distance (m) where the circular wind speed is calculated\nRm: float, radius of maximum wind (m)\npc: float, central pressure\nB: float, Holland B parameter, can be calculated using calc_holland_B_full()\npn: float, nominal pressure outide of the storm\nrhoair: density of air km/m**3</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">r</span>, </span><span class=\"param\"><span class=\"n\">Rm</span>, </span><span class=\"param\"><span class=\"n\">pc</span>, </span><span class=\"param\"><span class=\"n\">B</span>, </span><span class=\"param\"><span class=\"n\">pn</span>, </span><span class=\"param\"><span class=\"n\">rhoair</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycaz.cyclone.model.calc_vcirc_w06", "modulename": "pycaz.cyclone.model", "qualname": "calc_vcirc_w06", "kind": "function", "doc": "<p>Calculate circular wind speed using Willoughby et al. 2006 model. </p>\n\n<p>r: float, radial distance in (m)\nRm: float, radius of maximum wind (m)\nn: power of increasing profile, default n=0.79\nX: distance to which extend the profile, (m) default 243km (243000m)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">r</span>, </span><span class=\"param\"><span class=\"n\">Rm</span>, </span><span class=\"param\"><span class=\"n\">Vm</span>, </span><span class=\"param\"><span class=\"n\">n</span><span class=\"o\">=</span><span class=\"mf\">0.79</span>, </span><span class=\"param\"><span class=\"n\">X</span><span class=\"o\">=</span><span class=\"mi\">243000</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycaz.cyclone.model.calc_vcirc_e04", "modulename": "pycaz.cyclone.model", "qualname": "calc_vcirc_e04", "kind": "function", "doc": "<p>Calculate circular wind speed using Emanuel 2004 model. </p>\n\n<p>r: float, radial distance (m)\nRm: float, radisu of maximum wind (m)\nb: constant, default 0.25\nm: constant, default 1.6\nn: constant, default 0.9\nR0: distance, (m), default 420000m (420km)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">r</span>, </span><span class=\"param\"><span class=\"n\">Rm</span>, </span><span class=\"param\"><span class=\"n\">Vm</span>, </span><span class=\"param\"><span class=\"n\">b</span><span class=\"o\">=</span><span class=\"mf\">0.25</span>, </span><span class=\"param\"><span class=\"n\">m</span><span class=\"o\">=</span><span class=\"mf\">1.6</span>, </span><span class=\"param\"><span class=\"n\">n</span><span class=\"o\">=</span><span class=\"mf\">0.9</span>, </span><span class=\"param\"><span class=\"n\">R0</span><span class=\"o\">=</span><span class=\"mi\">420000</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycaz.cyclone.model.calc_vcirc_e11", "modulename": "pycaz.cyclone.model", "qualname": "calc_vcirc_e11", "kind": "function", "doc": "<p>Calculate circular wind speed using Emanuel 2011 model. The model equation is\ngiven in Lin and Chavas 2012.</p>\n\n<p>r: float, radial distance (m)\nRm: float, radius of maximum wind (m)\nVm: float, maximum wind speed (m/s)\nf: coriolis, can be calc by coriolis() function</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">r</span>, </span><span class=\"param\"><span class=\"n\">Rm</span>, </span><span class=\"param\"><span class=\"n\">Vm</span>, </span><span class=\"param\"><span class=\"n\">f</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycaz.cyclone.model.calc_vcirc_m16", "modulename": "pycaz.cyclone.model", "qualname": "calc_vcirc_m16", "kind": "function", "doc": "<p>Calculate circular wind speed using Murty et al. 2016 model, developed for \nindian ocean.</p>\n\n<p>r: float, radial distance (m)\nRm: float, radius of maximum wind (m)\nVm: float, maximum wind speed (m/s)\nn: power, default is 0.6</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">r</span>, </span><span class=\"param\"><span class=\"n\">Rm</span>, </span><span class=\"param\"><span class=\"n\">Vm</span>, </span><span class=\"param\"><span class=\"n\">n</span><span class=\"o\">=</span><span class=\"mf\">0.6</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycaz.cyclone.model.calc_mslp_h80", "modulename": "pycaz.cyclone.model", "qualname": "calc_mslp_h80", "kind": "function", "doc": "<p>Calculate mean-sea-level pressure based using Holland 1980 model.\nr: radial distance</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">r</span>, </span><span class=\"param\"><span class=\"n\">Rm</span>, </span><span class=\"param\"><span class=\"n\">pc</span>, </span><span class=\"param\"><span class=\"n\">B</span>, </span><span class=\"param\"><span class=\"n\">pn</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycaz.cyclone.track", "modulename": "pycaz.cyclone.track", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pycaz.cyclone.track.Record", "modulename": "pycaz.cyclone.track", "qualname": "Record", "kind": "class", "doc": "<p></p>\n", "bases": "builtins.dict"}, {"fullname": "pycaz.cyclone.track.Record.__init__", "modulename": "pycaz.cyclone.track", "qualname": "Record.__init__", "kind": "function", "doc": "<p>A recrod object takes keyworded input as arguments by entending the python\ndictionary object. </p>\n\n<p>The required fields are - \n    : timestamp:    datetime, pd.Datetimeindex\n    : lon:          longitude, 0-359, float\n    : lat:          latitude, -180, 180, float\n    : mslp:         central pressure, Pa, float\n    : vmax:         maximum velocity, m/s, float</p>\n\n<p>The optional (but recommended) fields are - \n    : rmax:         radius of maximum wind, m, float\n    : vinfo:        list of velocity, m/s, list or numpy array, size n\n    : radinfo:      2d list of radial info, m, list or numpy array, size nx4\n    : ustorm:       speed of storm in x-direction, m/s\n    : vstorm:       speed of strom in y-direction, m/s</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "pycaz.cyclone.track.Record.gen_radial_fields", "modulename": "pycaz.cyclone.track", "qualname": "Record.gen_radial_fields", "kind": "function", "doc": "<p>Generate the interpolator for radial field for exisiting radial informations.\nTo get correct radial field, atmospheric background is removed and\nthe amount to be removed is controlled by fraction, and angle.  </p>\n\n<p>Arguments:\n    fraction: float, fraction of translation speed to remove\n    angle: float, angle of translation velocity change in degree\n    swrf: float, surface wind reduction factor</p>\n\n<p>Due to translation a fraction of the wind-speed is embadded to the axysymmetric\nwind structure. To get the radial wind structure, we need to remove this\ntranslation velocity from the recorded wind velocity.</p>\n\n<p>The fraction is historically taken as unity (1). However, as shown in \nlin and chavas (2012), more statistically consistent value of this fraction\nis 0.56 (default)</p>\n\n<p>Similarly, the translation is not fully forward (angle=0), rather the \nbackground wind is slightly on southerly direction if we consider the\nstorm is westerly. The angle is found around 19.2 degrees from statistical\nanalysis. Thus the background wind is rotated anti-clockwise and needs \nto be updated before applying as fraction to the wind values.</p>\n\n<p>In the advisories, radial fields are defined at 10m level, whereas \nthe analytical fields are defined at the boundary layer. Thus the velocity\nis needed to be divided by SWRF to shift it to boundary layer and multiplied\nby SWRF to get it back to 10m level.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">fraction</span><span class=\"o\">=</span><span class=\"mf\">0.56</span>, </span><span class=\"param\"><span class=\"n\">angle</span><span class=\"o\">=</span><span class=\"mf\">19.2</span>, </span><span class=\"param\"><span class=\"n\">swrf</span><span class=\"o\">=</span><span class=\"mf\">0.9</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycaz.cyclone.track.Record.calc_rmax", "modulename": "pycaz.cyclone.track", "qualname": "Record.calc_rmax", "kind": "function", "doc": "<p>Calculate Radius of maximum wind based on a given method on the selected\nradial informations.</p>\n\n<p>methods: list, list of methods to try one after another\nuse_rmax_info: bool, existing rmax to be used directly or not\nvlimit: list of maximum limit of v for method to be used, \n        last one must be np.inf, vlimit is right open )\nkw_atmos: dict, atmospheric information, generally needed for H80 model\nkw_h80: dict, solver options for H80 model\nkw_e11: dict, solver options for E11 model</p>\n\n<p>Following methods are implemented - \n    'E11' : Emanuel 2011 model as described in Lin and Chavas 2012\n    'H80' : Holland 1980 model based on radial info\n    'S02' : Silva et al. 2002 based on regression of central pressure\n            rmax = 0.4785 * Pc (mb) - 413 (km)\n    'W04' : Willoughby and Rahn (2004) regression of Vmax\n            rmax = 51.6<em>exp(-0.0223</em>Vmax + 0.0281*lat) (km)</p>\n\n<p>Models to be implemented in the future - \n    'H80c' : Holland 1980c (f related values are removed)\n    'S92' : Slosh model, by jeleniaski et al . 1992\n    'E04' : Emanuel 2004 model\n    'M16' : Murty et al 2016 model\n    'W06' : Willoughby et al. 2006 model</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">methods</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;H80&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;E11&#39;</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">use_rmax_info</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">vlimit</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"n\">inf</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">kw_atmos</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">&#39;pn&#39;</span><span class=\"p\">:</span> <span class=\"mi\">101325</span><span class=\"p\">,</span> <span class=\"s1\">&#39;rhoair&#39;</span><span class=\"p\">:</span> <span class=\"mf\">1.15</span><span class=\"p\">}</span>,</span><span class=\"param\">\t<span class=\"n\">kw_h80</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">&#39;bmax&#39;</span><span class=\"p\">:</span> <span class=\"mf\">2.5</span><span class=\"p\">,</span> <span class=\"s1\">&#39;bmin&#39;</span><span class=\"p\">:</span> <span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"s1\">&#39;solver&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;fsolve&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;limit&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">5000</span><span class=\"p\">,</span> <span class=\"mi\">500000</span><span class=\"p\">],</span> <span class=\"s1\">&#39;step&#39;</span><span class=\"p\">:</span> <span class=\"mi\">100</span><span class=\"p\">}</span>,</span><span class=\"param\">\t<span class=\"n\">kw_e11</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">&#39;solver&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;fsolve&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;limit&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">5000</span><span class=\"p\">,</span> <span class=\"mi\">500000</span><span class=\"p\">],</span> <span class=\"s1\">&#39;step&#39;</span><span class=\"p\">:</span> <span class=\"mi\">100</span><span class=\"p\">}</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycaz.cyclone.track.Record.calculate_wind", "modulename": "pycaz.cyclone.track", "qualname": "Record.calculate_wind", "kind": "function", "doc": "<p>Calculate wind field using given method till a fractional distance of \nrmax.</p>\n\n<p>at: (r, theta) location where the wind is calculated,\n    r, float, distance in m \n    theta, float, is -2<em>np.pi, 2</em>np.pi radians\n    Essentially theta is expected to be output from np.arctan2(y,x)\n    Theis counter-clockwise from x-axis angle is converted to a clockwise\n    angle from y axis to match the interpolation grid of the storm paramters. \nmethods: array, list of methods to be used. Currently implemented methods\n        are - H80, H80c, J92, W06, E04, E11, M16\nrmax_frac: array, till which fraction of rmax, the method to be used,\n        np.inf for whole\nrmax_select: which rmax to select, int, str\n            'mean': mean value of the rmax\n            'nearest': rmax calculated from nearest frmax\n            'linear': rmax calculated from a linear interpolation\n            int: number corresponding to selected rmax &gt;1\nkw_corr: corrections applied for translation and surface wind reduction\n        fraction: fraction of translation wind, 0.56 default\n        angle: angle of ratation, 19.2 degree default\n        swrf: surface wind reduction factor, 0.9 default\n        tfac: convertion factor to from x minute to 10 minute wind\n            0.88 for conversion from 1minute to 10minute\nkw_atmos: constant atmospheric values\n    pn: nominal or environmental pressure, default 101325 Pa\n    rhoair: air density, default 1.15 km/m^3\nkw_h80: extra argument for H80 model\n    bmin: Minimum B value\n    bmax: Maximum B value\nkw_e04: extra argument for E04 model\n    b: default 0.25\n    m: default 1.6\n    n: default 0.9\n    R0: default 420000m (420km)\nkw_w06: extra argument for W06 model\n    n: default 0.79\n    X: default 243000m (243km)\nkw_m16: extra argument for M16 model\n    n: default 0.6</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">at</span>,</span><span class=\"param\">\t<span class=\"n\">methods</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;E11&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;H80&#39;</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">rmax_frac</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">inf</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">rmax_select</span><span class=\"o\">=</span><span class=\"s1\">&#39;mean&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">kw_corr</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">&#39;fraction&#39;</span><span class=\"p\">:</span> <span class=\"mf\">0.56</span><span class=\"p\">,</span> <span class=\"s1\">&#39;angle&#39;</span><span class=\"p\">:</span> <span class=\"mf\">19.2</span><span class=\"p\">,</span> <span class=\"s1\">&#39;swrf&#39;</span><span class=\"p\">:</span> <span class=\"mf\">0.9</span><span class=\"p\">,</span> <span class=\"s1\">&#39;tfac&#39;</span><span class=\"p\">:</span> <span class=\"mf\">0.88</span><span class=\"p\">}</span>,</span><span class=\"param\">\t<span class=\"n\">kw_atmos</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">&#39;pn&#39;</span><span class=\"p\">:</span> <span class=\"mi\">101325</span><span class=\"p\">,</span> <span class=\"s1\">&#39;rhoair&#39;</span><span class=\"p\">:</span> <span class=\"mf\">1.15</span><span class=\"p\">}</span>,</span><span class=\"param\">\t<span class=\"n\">kw_h80</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">&#39;bmax&#39;</span><span class=\"p\">:</span> <span class=\"mf\">2.5</span><span class=\"p\">,</span> <span class=\"s1\">&#39;bmin&#39;</span><span class=\"p\">:</span> <span class=\"mf\">0.5</span><span class=\"p\">}</span>,</span><span class=\"param\">\t<span class=\"n\">kw_e04</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">&#39;b&#39;</span><span class=\"p\">:</span> <span class=\"mf\">0.25</span><span class=\"p\">,</span> <span class=\"s1\">&#39;m&#39;</span><span class=\"p\">:</span> <span class=\"mf\">1.6</span><span class=\"p\">,</span> <span class=\"s1\">&#39;n&#39;</span><span class=\"p\">:</span> <span class=\"mf\">0.9</span><span class=\"p\">,</span> <span class=\"s1\">&#39;R0&#39;</span><span class=\"p\">:</span> <span class=\"mi\">420000</span><span class=\"p\">}</span>,</span><span class=\"param\">\t<span class=\"n\">kw_w06</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">&#39;n&#39;</span><span class=\"p\">:</span> <span class=\"mf\">0.79</span><span class=\"p\">,</span> <span class=\"s1\">&#39;X&#39;</span><span class=\"p\">:</span> <span class=\"mi\">243000</span><span class=\"p\">}</span>,</span><span class=\"param\">\t<span class=\"n\">kw_m16</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">&#39;n&#39;</span><span class=\"p\">:</span> <span class=\"mf\">0.6</span><span class=\"p\">}</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycaz.cyclone.track.Record.calculate_pressure", "modulename": "pycaz.cyclone.track", "qualname": "Record.calculate_pressure", "kind": "function", "doc": "<p>Calculate pressure field using given method till a fractional distance of \nrmax.</p>\n\n<p>at: (r, theta) location where the wind is calculated,\n    r, float, distance in m \n    theta, float, is -2<em>np.pi, 2</em>np.pi radians\n    Essentially theta is expected to be output from np.arctan2(y,x)\n    This is counter-clockwise from x-axis angle is converted to a clockwise\n    angle from y axis to match the interpolation grid of the storm paramters. \nmethods: array, list of methods to be used. Currently implemented methods\n        are - H80, H80c\nrmax_frac: array, till which fraction of rmax, the method to be used,\n        np.inf for whole\nrmax_select: which rmax to select, int, str\n            'mean': mean value of the rmax\n            'nearest': rmax calculated from nearest frmax\n            'linear': rmax calculated from a linear interpolation\n            int: number corresponding to selected rmax &gt;1\nkw_atmos: constant atmospheric values\n    pn: nominal or environmental pressure, default 101325 Pa\n    rhoair: air density, default 1.15 kg/m^3\nkw_h80: extra argument for H80 model\n    bmin: min value of B\n    bmax: max value of B</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">at</span>,</span><span class=\"param\">\t<span class=\"n\">methods</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;H80&#39;</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">rmax_frac</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">inf</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">rmax_select</span><span class=\"o\">=</span><span class=\"s1\">&#39;mean&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">kw_atmos</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">&#39;pn&#39;</span><span class=\"p\">:</span> <span class=\"mi\">101325</span><span class=\"p\">,</span> <span class=\"s1\">&#39;rhoair&#39;</span><span class=\"p\">:</span> <span class=\"mf\">1.15</span><span class=\"p\">}</span>,</span><span class=\"param\">\t<span class=\"n\">kw_h80</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">&#39;bmax&#39;</span><span class=\"p\">:</span> <span class=\"mf\">2.5</span><span class=\"p\">,</span> <span class=\"s1\">&#39;bmin&#39;</span><span class=\"p\">:</span> <span class=\"mf\">0.5</span><span class=\"p\">}</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycaz.cyclone.track.Track", "modulename": "pycaz.cyclone.track", "qualname": "Track", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "pycaz.cyclone.track.Track.__init__", "modulename": "pycaz.cyclone.track", "qualname": "Track.__init__", "kind": "function", "doc": "<p>Take a record or an array of record and provide track related functionalities.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">records</span></span>)</span>"}, {"fullname": "pycaz.cyclone.track.Track.sort", "modulename": "pycaz.cyclone.track", "qualname": "Track.sort", "kind": "function", "doc": "<p>Apply time sorting and sort the records</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycaz.cyclone.track.Track.calc_translation", "modulename": "pycaz.cyclone.track", "qualname": "Track.calc_translation", "kind": "function", "doc": "<p>Calculate and update the ustorm, vstorm fields.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycaz.cyclone.track.Track.append", "modulename": "pycaz.cyclone.track", "qualname": "Track.append", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">records</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycaz.cyclone.track.Track.interpolate", "modulename": "pycaz.cyclone.track", "qualname": "Track.interpolate", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">at</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycaz.cyclone.track.Track.plot", "modulename": "pycaz.cyclone.track", "qualname": "Track.plot", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">ax</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">subplot_kw</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">&#39;projection&#39;</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">cartopy</span><span class=\"o\">.</span><span class=\"n\">crs</span><span class=\"o\">.</span><span class=\"n\">PlateCarree</span> <span class=\"nb\">object</span> <span class=\"n\">at</span> <span class=\"mh\">0x0000022CCC6DF1C8</span><span class=\"o\">&gt;</span><span class=\"p\">}</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycaz.schism", "modulename": "pycaz.schism", "kind": "module", "doc": "<p>The <code>schism</code> module of <code>pycaz</code> concerns handling of SCHISM model, paricularly the input\nin SCHISM model. The model code is available at <a href=\"https://github.com/schism-dev/schism\">https://github.com/schism-dev/schism</a>. An\nofficial toolbox is available at <a href=\"https://github.com/schism-dev/pyschism\">https://github.com/schism-dev/pyschism</a>. The functionalities\nof the current toolbox is not one-to-one, and likely much less than the official pyschism.\nHowever, the philosophy of the current toolbox is comparatively simple, and based on the\nidea that research activities requires more freedom.</p>\n\n<p>Further documentation will be added here in the future.</p>\n"}, {"fullname": "pycaz.schism.bc", "modulename": "pycaz.schism.bc", "kind": "module", "doc": "<p>Implements the classes that provides the reading and writing functionalities of the boundary\nconditions.</p>\n"}, {"fullname": "pycaz.schism.bc.Iettype1", "modulename": "pycaz.schism.bc", "qualname": "Iettype1", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "pycaz.schism.bc.Iettype1.__init__", "modulename": "pycaz.schism.bc", "qualname": "Iettype1.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "pycaz.schism.bc.Iettype2", "modulename": "pycaz.schism.bc", "qualname": "Iettype2", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "pycaz.schism.bc.Iettype2.__init__", "modulename": "pycaz.schism.bc", "qualname": "Iettype2.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "pycaz.schism.bc.Iettype3", "modulename": "pycaz.schism.bc", "qualname": "Iettype3", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "pycaz.schism.bc.Iettype3.__init__", "modulename": "pycaz.schism.bc", "qualname": "Iettype3.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "pycaz.schism.bc.Iettype4", "modulename": "pycaz.schism.bc", "qualname": "Iettype4", "kind": "class", "doc": "<p>netcdf elev2D.th {\n    dimensions:\n        time = UNLIMITED ; // (73 currently)\n        nOpenBndNodes = 748 ;\n        nLevels = 1 ;\n        nComponents = 1 ;\n        one = 1 ;\n    variables:\n        double time_series(time, nOpenBndNodes, nLevels, nComponents) ;\n        float time_step(one) ;\n        double time(time) ;\n    }</p>\n"}, {"fullname": "pycaz.schism.bc.Iettype4.__init__", "modulename": "pycaz.schism.bc", "qualname": "Iettype4.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "pycaz.schism.bc.Iettype5", "modulename": "pycaz.schism.bc", "qualname": "Iettype5", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "pycaz.schism.bc.Iettype5.__init__", "modulename": "pycaz.schism.bc", "qualname": "Iettype5.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "pycaz.schism.bc.Ifltype1", "modulename": "pycaz.schism.bc", "qualname": "Ifltype1", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "pycaz.schism.bc.Ifltype1.__init__", "modulename": "pycaz.schism.bc", "qualname": "Ifltype1.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "pycaz.schism.bc.Ifltype2", "modulename": "pycaz.schism.bc", "qualname": "Ifltype2", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "pycaz.schism.bc.Ifltype2.__init__", "modulename": "pycaz.schism.bc", "qualname": "Ifltype2.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "pycaz.schism.bc.Ifltype3", "modulename": "pycaz.schism.bc", "qualname": "Ifltype3", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "pycaz.schism.bc.Ifltype3.__init__", "modulename": "pycaz.schism.bc", "qualname": "Ifltype3.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "pycaz.schism.bc.Ifltype4", "modulename": "pycaz.schism.bc", "qualname": "Ifltype4", "kind": "class", "doc": "<p>netcdf uv3D.th {\n    dimensions:\n        nOpenBndNodes = 748 ;\n        one = 1 ;\n        time = UNLIMITED ; // (73 currently)\n        nLevels = 44 ;\n        nComponents = 2 ;\n    variables:\n        float time_step(one) ;\n        double time(time) ;\n        float time_series(time, nOpenBndNodes, nLevels, nComponents) ;\n    }</p>\n"}, {"fullname": "pycaz.schism.bc.Ifltype4.__init__", "modulename": "pycaz.schism.bc", "qualname": "Ifltype4.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "pycaz.schism.bc.Ifltype5", "modulename": "pycaz.schism.bc", "qualname": "Ifltype5", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "pycaz.schism.bc.Ifltype5.__init__", "modulename": "pycaz.schism.bc", "qualname": "Ifltype5.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "pycaz.schism.bc.Ifltype_1", "modulename": "pycaz.schism.bc", "qualname": "Ifltype_1", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "pycaz.schism.bc.Ifltype_1.__init__", "modulename": "pycaz.schism.bc", "qualname": "Ifltype_1.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "pycaz.schism.bctides", "modulename": "pycaz.schism.bctides", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pycaz.schism.bctides.Bctides", "modulename": "pycaz.schism.bctides", "qualname": "Bctides", "kind": "class", "doc": "<p></p>\n", "bases": "builtins.dict"}, {"fullname": "pycaz.schism.bctides.Bctides.__init__", "modulename": "pycaz.schism.bctides", "qualname": "Bctides.__init__", "kind": "function", "doc": "<p>A bctides object extended from dictonaries</p>\n\n<p>Additional key-value pairs can be added using keyworded arguments.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "pycaz.schism.bctides.Bctides.copy", "modulename": "pycaz.schism.bctides", "qualname": "Bctides.copy", "kind": "function", "doc": "<p>D.copy() -> a shallow copy of D</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycaz.schism.bctides.Bctides.describe", "modulename": "pycaz.schism.bctides", "qualname": "Bctides.describe", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycaz.schism.bctides.Bctides.add_tidefr", "modulename": "pycaz.schism.bctides", "qualname": "Bctides.add_tidefr", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dict_tidefr</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycaz.schism.bctides.Bctides.update_nodal", "modulename": "pycaz.schism.bctides", "qualname": "Bctides.update_nodal", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">tidefac</span><span class=\"p\">:</span> <span class=\"n\">pycaz</span><span class=\"o\">.</span><span class=\"n\">schism</span><span class=\"o\">.</span><span class=\"n\">tidefac</span><span class=\"o\">.</span><span class=\"n\">Tidefac</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycaz.schism.bctides.Bctides.write", "modulename": "pycaz.schism.bctides", "qualname": "Bctides.write", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">fname</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">replace</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycaz.schism.bctides.read_bctides", "modulename": "pycaz.schism.bctides", "qualname": "read_bctides", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">fname</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pycaz</span><span class=\"o\">.</span><span class=\"n\">schism</span><span class=\"o\">.</span><span class=\"n\">bctides</span><span class=\"o\">.</span><span class=\"n\">Bctides</span>:</span></span>", "funcdef": "def"}, {"fullname": "pycaz.schism.bctides.update_bctide", "modulename": "pycaz.schism.bctides", "qualname": "update_bctide", "kind": "function", "doc": "<p>Update nodal information from a tidefac object.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">bctides</span><span class=\"p\">:</span> <span class=\"n\">pycaz</span><span class=\"o\">.</span><span class=\"n\">schism</span><span class=\"o\">.</span><span class=\"n\">bctides</span><span class=\"o\">.</span><span class=\"n\">Bctides</span>,</span><span class=\"param\">\t<span class=\"n\">tidefac</span><span class=\"p\">:</span> <span class=\"n\">pycaz</span><span class=\"o\">.</span><span class=\"n\">schism</span><span class=\"o\">.</span><span class=\"n\">tidefac</span><span class=\"o\">.</span><span class=\"n\">Tidefac</span>,</span><span class=\"param\">\t<span class=\"n\">inplace</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycaz.schism.bctides.write_bctides", "modulename": "pycaz.schism.bctides", "qualname": "write_bctides", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">bctides</span><span class=\"p\">:</span> <span class=\"n\">pycaz</span><span class=\"o\">.</span><span class=\"n\">schism</span><span class=\"o\">.</span><span class=\"n\">bctides</span><span class=\"o\">.</span><span class=\"n\">Bctides</span>,</span><span class=\"param\">\t<span class=\"n\">fname</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">replace</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pycaz.schism.hgrid", "modulename": "pycaz.schism.hgrid", "kind": "module", "doc": "<p>Implements Hgrid and Gr3 related functionalities.</p>\n"}, {"fullname": "pycaz.schism.hgrid.Gr3", "modulename": "pycaz.schism.hgrid", "qualname": "Gr3", "kind": "class", "doc": "<p></p>\n", "bases": "builtins.dict"}, {"fullname": "pycaz.schism.hgrid.Gr3.__init__", "modulename": "pycaz.schism.hgrid", "qualname": "Gr3.__init__", "kind": "function", "doc": "<p>A gr3 object extended from dictonaries</p>\n\n<p>Additional key-value pairs can be added using keyworded arguments.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "pycaz.schism.hgrid.Gr3.subset_nodes", "modulename": "pycaz.schism.hgrid", "qualname": "Gr3.subset_nodes", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">nodeid</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycaz.schism.hgrid.Gr3.extent", "modulename": "pycaz.schism.hgrid", "qualname": "Gr3.extent", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">buffer</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycaz.schism.hgrid.Gr3.copy", "modulename": "pycaz.schism.hgrid", "qualname": "Gr3.copy", "kind": "function", "doc": "<p>D.copy() -> a shallow copy of D</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">typing_extensions</span><span class=\"o\">.</span><span class=\"n\">Self</span>:</span></span>", "funcdef": "def"}, {"fullname": "pycaz.schism.hgrid.Gr3.split_quads", "modulename": "pycaz.schism.hgrid", "qualname": "Gr3.split_quads", "kind": "function", "doc": "<p>Convert to a fully triangular grid from hybrid quad-tri grid</p>\n\n<p>TODO: Implement based on split_quads_wwm.f90</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pycaz.schism.hgrid.Gr3.write", "modulename": "pycaz.schism.hgrid", "qualname": "Gr3.write", "kind": "function", "doc": "<p>Write the grid to file</p>\n\n<p>This methods writes the grid to a file specified by path. The gr3\nformat is implemented as appear in SCHISM manual.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">fname</span>, </span><span class=\"param\"><span class=\"n\">fmt</span><span class=\"o\">=</span><span class=\"s1\">&#39;</span><span class=\"si\">%16.10f</span><span class=\"s1\">&#39;</span>, </span><span class=\"param\"><span class=\"n\">overwrite</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pycaz.schism.hgrid.Gr3.to_xarray", "modulename": "pycaz.schism.hgrid", "qualname": "Gr3.to_xarray", "kind": "function", "doc": "<p>Returns a xarray dataset of gr3/hgrid</p>\n\n<p>Dimensions:\nnSCHISM_hgrid_node : number of nodes;\nnSCHISM_hgrid_face : number of faces;\nnMaxSCHISM_hgrid_face_nodes: 4; # hardcoded\nnData: number of data columns; only appears for velocity</p>\n\n<p>Variables:\nx column: SCHISM_hgrid_node_x\ny column: SCHISM_hgrid_node_y\ndata columns: the name is to be taken as input</p>\n\n<p>Global attributes:\nConvention = \"CF-1.0\"\nInformation = From mesh header</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">varname</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;depth&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">xarray</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">Dataset</span>:</span></span>", "funcdef": "def"}, {"fullname": "pycaz.schism.hgrid.OpenBoundary", "modulename": "pycaz.schism.hgrid", "qualname": "OpenBoundary", "kind": "class", "doc": "<p></p>\n", "bases": "builtins.dict"}, {"fullname": "pycaz.schism.hgrid.OpenBoundary.__init__", "modulename": "pycaz.schism.hgrid", "qualname": "OpenBoundary.__init__", "kind": "function", "doc": "<p>A Open boundary object extended from dictonaries</p>\n\n<p>Additional key-value pairs can be added using keyworded arguments.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "pycaz.schism.hgrid.OpenBoundary.reset", "modulename": "pycaz.schism.hgrid", "qualname": "OpenBoundary.reset", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycaz.schism.hgrid.LandBoundary", "modulename": "pycaz.schism.hgrid", "qualname": "LandBoundary", "kind": "class", "doc": "<p></p>\n", "bases": "builtins.dict"}, {"fullname": "pycaz.schism.hgrid.LandBoundary.__init__", "modulename": "pycaz.schism.hgrid", "qualname": "LandBoundary.__init__", "kind": "function", "doc": "<p>A Land boundary object extended from dictonaries</p>\n\n<p>Additional key-value pairs can be added using keyworded arguments.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "pycaz.schism.hgrid.LandBoundary.reset", "modulename": "pycaz.schism.hgrid", "qualname": "LandBoundary.reset", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycaz.schism.hgrid.Hgrid", "modulename": "pycaz.schism.hgrid", "qualname": "Hgrid", "kind": "class", "doc": "<p></p>\n", "bases": "Gr3"}, {"fullname": "pycaz.schism.hgrid.Hgrid.__init__", "modulename": "pycaz.schism.hgrid", "qualname": "Hgrid.__init__", "kind": "function", "doc": "<p>A Hgrid object extended from Gr3 object, with an overrided write functionality.</p>\n\n<p>**kwargs: {\n    'header' -> str,\n    'nodes' -> np.ndarray,\n    'elems' -> np.ndarray,\n    'open_bnds' -> OpenBoundary,\n    'land_bnds' -> LandBoundary\n}</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "pycaz.schism.hgrid.Hgrid.write", "modulename": "pycaz.schism.hgrid", "qualname": "Hgrid.write", "kind": "function", "doc": "<p>Write the grid to file</p>\n\n<p>This methods writes the grid to a file specified by path. The gr3\nformat is implemented as appear in SCHISM manual.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">fname</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">overwrite</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycaz.schism.hgrid.Hgrid.gr3", "modulename": "pycaz.schism.hgrid", "qualname": "Hgrid.gr3", "kind": "variable", "doc": "<p>Only the Gr3 object form the Hgrid object. In this case, element table is always \navailable.</p>\n"}, {"fullname": "pycaz.schism.hgrid.Hgrid.elems", "modulename": "pycaz.schism.hgrid", "qualname": "Hgrid.elems", "kind": "variable", "doc": "<p>The nodal connectivity table of the Hgrid object.</p>\n"}, {"fullname": "pycaz.schism.hgrid.Hgrid.open_bnds", "modulename": "pycaz.schism.hgrid", "qualname": "Hgrid.open_bnds", "kind": "variable", "doc": "<p>A dictionary containing the open boundaries.</p>\n"}, {"fullname": "pycaz.schism.hgrid.Hgrid.land_bnds", "modulename": "pycaz.schism.hgrid", "qualname": "Hgrid.land_bnds", "kind": "variable", "doc": "<p>A dictionary containing the land boundaries.</p>\n"}, {"fullname": "pycaz.schism.hgrid.Hgrid.get_bctides", "modulename": "pycaz.schism.hgrid", "qualname": "Hgrid.get_bctides", "kind": "function", "doc": "<p>Return an empty Bctides object with the definitions of the Boundaries.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycaz.schism.hgrid.Hgrid.describe", "modulename": "pycaz.schism.hgrid", "qualname": "Hgrid.describe", "kind": "function", "doc": "<p>A human-redable description of the hgrid.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycaz.schism.hgrid.read_gr3", "modulename": "pycaz.schism.hgrid", "qualname": "read_gr3", "kind": "function", "doc": "<p>Reads a gr3 file and return a Gr3 dict object.</p>\n\n<p>Does not through error if elems are missing.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">fname</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pycaz</span><span class=\"o\">.</span><span class=\"n\">schism</span><span class=\"o\">.</span><span class=\"n\">hgrid</span><span class=\"o\">.</span><span class=\"n\">Gr3</span>:</span></span>", "funcdef": "def"}, {"fullname": "pycaz.schism.hgrid.read_hgrid", "modulename": "pycaz.schism.hgrid", "qualname": "read_hgrid", "kind": "function", "doc": "<p>Reads a hgrid file</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">fname</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pycaz</span><span class=\"o\">.</span><span class=\"n\">schism</span><span class=\"o\">.</span><span class=\"n\">hgrid</span><span class=\"o\">.</span><span class=\"n\">Hgrid</span>:</span></span>", "funcdef": "def"}, {"fullname": "pycaz.schism.schout", "modulename": "pycaz.schism.schout", "kind": "module", "doc": "<p>SCHISM outputs handling related functionalities</p>\n"}, {"fullname": "pycaz.schism.schout.Global2Local", "modulename": "pycaz.schism.schout", "qualname": "Global2Local", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "pycaz.schism.schout.Global2Local.__init__", "modulename": "pycaz.schism.schout", "qualname": "Global2Local.__init__", "kind": "function", "doc": "<p>path: str, path where the global_to_local file exists, typically 'outputs'</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, {"fullname": "pycaz.schism.schout.Global2Local.load_global2local", "modulename": "pycaz.schism.schout", "qualname": "Global2Local.load_global2local", "kind": "function", "doc": "<p>loads global to local file</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycaz.schism.schout.Local2Global", "modulename": "pycaz.schism.schout", "qualname": "Local2Global", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "pycaz.schism.schout.Local2Global.__init__", "modulename": "pycaz.schism.schout", "qualname": "Local2Global.__init__", "kind": "function", "doc": "<p>path: str, path to a local_to_global file\ncompiler: str, flag to identify output from which compiler gnu or intel</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">compiler</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;intel&#39;</span></span>)</span>"}, {"fullname": "pycaz.schism.schout.Local2Global.read_local2global", "modulename": "pycaz.schism.schout", "qualname": "Local2Global.read_local2global", "kind": "function", "doc": "<p>reading the local to global file</p>\n\n<p>There is a difference between gcc-fortran and intel fortran. In intel \nfortran the value is saved till 72 character and in gcc-fortran version \nthe value is saved as requested. As the critical part of the variables \n(i.e., time) can be extracted safely we are not bothering about the rest\nof the variables. However, for completeness, the reading function must be \nrewritten.</p>\n\n<p>Currently a compiler flag is used to circumvent this issue.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycaz.schism.schout.Local2Globals", "modulename": "pycaz.schism.schout", "qualname": "Local2Globals", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "pycaz.schism.schout.Local2Globals.__init__", "modulename": "pycaz.schism.schout", "qualname": "Local2Globals.__init__", "kind": "function", "doc": "<p>path: str, path to a bunch of local_to_global files\ncompiler: str, type of compiler used in model, gnu or intel\n            this is to solve the issue to 72 char line and contineous\n            line in reading local_to_global files</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">prefix</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;local_to_global*&#39;</span>, </span><span class=\"param\"><span class=\"n\">compiler</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;intel&#39;</span></span>)</span>"}, {"fullname": "pycaz.schism.schout.Local2Globals.nglobalnode", "modulename": "pycaz.schism.schout", "qualname": "Local2Globals.nglobalnode", "kind": "variable", "doc": "<p>Global node count from local_to_global file header</p>\n"}, {"fullname": "pycaz.schism.schout.Local2Globals.nglobalelem", "modulename": "pycaz.schism.schout", "qualname": "Local2Globals.nglobalelem", "kind": "variable", "doc": "<p>Global element count from local_to_global file header</p>\n"}, {"fullname": "pycaz.schism.schout.Local2Globals.nglobaledge", "modulename": "pycaz.schism.schout", "qualname": "Local2Globals.nglobaledge", "kind": "variable", "doc": "<p>Global edge count from local_to_global file header</p>\n"}, {"fullname": "pycaz.schism.schout.Local2Globals.nvrt", "modulename": "pycaz.schism.schout", "qualname": "Local2Globals.nvrt", "kind": "variable", "doc": "<p>Number of vertical layer defined in local_to_global file header</p>\n"}, {"fullname": "pycaz.schism.schout.Local2Globals.load_files", "modulename": "pycaz.schism.schout", "qualname": "Local2Globals.load_files", "kind": "function", "doc": "<p>prefix: str, file perfix to list and process, default local_to_global*\ncompiler: str, output from gnu or intel compilers</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">prefix</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;local_to_global*&#39;</span>, </span><span class=\"param\"><span class=\"n\">compiler</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;intel&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycaz.schism.schout.Local2Globals.merge_nodes", "modulename": "pycaz.schism.schout", "qualname": "Local2Globals.merge_nodes", "kind": "function", "doc": "<p>method - merge the nodes in all local to global files to global nodes</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycaz.schism.schout.Local2Globals.merge_elements", "modulename": "pycaz.schism.schout", "qualname": "Local2Globals.merge_elements", "kind": "function", "doc": "<p>method to merge the elements from all local_to_global files</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycaz.schism.schout.Local2Globals.merge_edges", "modulename": "pycaz.schism.schout", "qualname": "Local2Globals.merge_edges", "kind": "function", "doc": "<p>method to merge the edges from all local_to_global files</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycaz.schism.schout.Schout", "modulename": "pycaz.schism.schout", "qualname": "Schout", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "pycaz.schism.schout.Schout.__init__", "modulename": "pycaz.schism.schout", "qualname": "Schout.__init__", "kind": "function", "doc": "<p>path: str, path to location of schout files, typically 'outputs'\nlocal2globals: Local2Globals, instance of object Local2Globals</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">local2globals</span><span class=\"p\">:</span> <span class=\"n\">pycaz</span><span class=\"o\">.</span><span class=\"n\">schism</span><span class=\"o\">.</span><span class=\"n\">schout</span><span class=\"o\">.</span><span class=\"n\">Local2Globals</span>,</span><span class=\"param\">\t<span class=\"n\">inprefix</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;schout&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">ispool</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">outfile</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;schout.nc&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">attrs</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span></span>)</span>"}, {"fullname": "pycaz.schism.schout.Schout.list_inputs", "modulename": "pycaz.schism.schout", "qualname": "Schout.list_inputs", "kind": "function", "doc": "<p>prefix: str, prefix for the file, default: 'schout'\nispool: int, spool number to combine, default: 1st spool</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">prefix</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;schout&#39;</span>, </span><span class=\"param\"><span class=\"n\">ispool</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycaz.schism.schout.Schout.create_file", "modulename": "pycaz.schism.schout", "qualname": "Schout.create_file", "kind": "function", "doc": "<p>outfile: str, filename of the output file\npath: str, path to store the output file</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">outfile</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;schout.nc&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycaz.schism.schout.Schout.combine", "modulename": "pycaz.schism.schout", "qualname": "Schout.combine", "kind": "function", "doc": "<p>varname: str, name of the variable to be merged\nrename: str, renamed variable\nlong_name: str, long_name of the variable\nunits: str, custom units, if None then will try to get original units\nchunksizes: dict, dimname:size, if None then no chunking, size='full'</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">varname</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">rename</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\tdatatype=&lt;class &#x27;numpy.float32&#x27;&gt;,</span><span class=\"param\">\t<span class=\"n\">long_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">units</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">chunksizes</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycaz.schism.schout.Schout.close_file", "modulename": "pycaz.schism.schout", "qualname": "Schout.close_file", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycaz.schism.sflux", "modulename": "pycaz.schism.sflux", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pycaz.schism.sflux.Sflux", "modulename": "pycaz.schism.sflux", "qualname": "Sflux", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "pycaz.schism.sflux.Sflux.__init__", "modulename": "pycaz.schism.sflux", "qualname": "Sflux.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">grid</span>,</span><span class=\"param\">\t<span class=\"n\">basedate</span>,</span><span class=\"param\">\t<span class=\"n\">sflux_type</span><span class=\"o\">=</span><span class=\"s1\">&#39;air&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">nstep</span><span class=\"o\">=</span><span class=\"mi\">96</span>,</span><span class=\"param\">\t<span class=\"n\">priority</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">syncstep</span><span class=\"o\">=</span><span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">path</span><span class=\"o\">=</span><span class=\"s1\">&#39;./sflux&#39;</span></span>)</span>"}, {"fullname": "pycaz.schism.sflux.Sflux.create_netcdf_air", "modulename": "pycaz.schism.sflux", "qualname": "Sflux.create_netcdf_air", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycaz.schism.sflux.Sflux.put_value_air", "modulename": "pycaz.schism.sflux", "qualname": "Sflux.put_value_air", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">stepi</span>, </span><span class=\"param\"><span class=\"n\">at</span>, </span><span class=\"param\"><span class=\"n\">flux</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycaz.schism.sflux.Sflux.create_netcdf_prc", "modulename": "pycaz.schism.sflux", "qualname": "Sflux.create_netcdf_prc", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycaz.schism.sflux.Sflux.put_value_prc", "modulename": "pycaz.schism.sflux", "qualname": "Sflux.put_value_prc", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">stepi</span>, </span><span class=\"param\"><span class=\"n\">at</span>, </span><span class=\"param\"><span class=\"n\">flux</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycaz.schism.sflux.Sflux.create_netcdf_rad", "modulename": "pycaz.schism.sflux", "qualname": "Sflux.create_netcdf_rad", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycaz.schism.sflux.Sflux.put_value_rad", "modulename": "pycaz.schism.sflux", "qualname": "Sflux.put_value_rad", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">stepi</span>, </span><span class=\"param\"><span class=\"n\">at</span>, </span><span class=\"param\"><span class=\"n\">flux</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycaz.schism.sflux.Sflux.close_netcdf", "modulename": "pycaz.schism.sflux", "qualname": "Sflux.close_netcdf", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycaz.schism.sflux.Sflux.write", "modulename": "pycaz.schism.sflux", "qualname": "Sflux.write", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">at</span>, </span><span class=\"param\"><span class=\"n\">flux</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycaz.schism.sflux.Sflux.sync", "modulename": "pycaz.schism.sflux", "qualname": "Sflux.sync", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycaz.schism.sflux.Sflux.finish", "modulename": "pycaz.schism.sflux", "qualname": "Sflux.finish", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycaz.schism.sflux.Sflux.sfluxtxt", "modulename": "pycaz.schism.sflux", "qualname": "Sflux.sfluxtxt", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dt</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycaz.schism.tidefac", "modulename": "pycaz.schism.tidefac", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pycaz.schism.tidefac.Tidefac", "modulename": "pycaz.schism.tidefac", "qualname": "Tidefac", "kind": "class", "doc": "<p></p>\n", "bases": "builtins.dict"}, {"fullname": "pycaz.schism.tidefac.Tidefac.__init__", "modulename": "pycaz.schism.tidefac", "qualname": "Tidefac.__init__", "kind": "function", "doc": "<p>A bctides object extended from dictonaries</p>\n\n<p>Additional key-value pairs can be added using keyworded arguments.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "pycaz.schism.tidefac.Tidefac.copy", "modulename": "pycaz.schism.tidefac", "qualname": "Tidefac.copy", "kind": "function", "doc": "<p>D.copy() -> a shallow copy of D</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycaz.schism.tidefac.Tidefac.describe", "modulename": "pycaz.schism.tidefac", "qualname": "Tidefac.describe", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycaz.schism.tidefac.read_tidefacout", "modulename": "pycaz.schism.tidefac", "qualname": "read_tidefacout", "kind": "function", "doc": "<p>A reader for the output from tide_fac.f program, used for generate tidefac information.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">fname</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pycaz</span><span class=\"o\">.</span><span class=\"n\">schism</span><span class=\"o\">.</span><span class=\"n\">tidefac</span><span class=\"o\">.</span><span class=\"n\">Tidefac</span>:</span></span>", "funcdef": "def"}, {"fullname": "pycaz.tide", "modulename": "pycaz.tide", "kind": "module", "doc": "<p><code>tide</code> module contains the classes and functions to -</p>\n\n<p>Submodules:</p>\n\n<ul>\n<li><code>tide.atlas</code></li>\n<li><code>tide.interpolate</code></li>\n<li><code>tide.utilities</code></li>\n</ul>\n\n<p>Functionalities:</p>\n\n<ul>\n<li>Read tidal atlas dataset</li>\n<li>Interpolate in a grid, or list of points (x, y)</li>\n<li>TODO: Reconstruct a timeseries from a set of constituents and their amplitude and phase\n<ul>\n<li>In a time-series</li>\n<li>In a grid</li>\n</ul></li>\n<li>Compute the nodal factor for a given time</li>\n</ul>\n\n<h1 id=\"generation-of-a-bctides\">Generation of a bctides</h1>\n\n<ol>\n<li>Read hgrid.gr3 file</li>\n<li>Get the boundary points from hgrid.gr3</li>\n<li>Get a list of potential waves, amplitude, phase\n<ol>\n<li>Correct for nodal before writing</li>\n</ol></li>\n<li>Get a list of tidal waves, amplitude, phase\n<ol>\n<li>Correct for nodal before writing</li>\n</ol></li>\n<li>Read timeseries for a boundary (repeat for each flow boundary)</li>\n<li>Write bctides, for a given time, and runtime</li>\n<li>Write flux.th for a given time, and runtime</li>\n</ol>\n\n<h1 id=\"accessing-tidal-atlas\">Accessing tidal atlas</h1>\n\n<ul>\n<li>interp_xy() -> dict(const:[amp, pha])</li>\n<li>interp_ds() -> dict(const:da)</li>\n</ul>\n"}, {"fullname": "pycaz.tide.atlas", "modulename": "pycaz.tide.atlas", "kind": "module", "doc": "<p>Contains the class description of Atlas and relevant reader function.</p>\n"}, {"fullname": "pycaz.tide.atlas.name_parser", "modulename": "pycaz.tide.atlas", "qualname": "name_parser", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">fname</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycaz.tide.atlas.Atlas", "modulename": "pycaz.tide.atlas", "qualname": "Atlas", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "pycaz.tide.atlas.Atlas.__init__", "modulename": "pycaz.tide.atlas", "qualname": "Atlas.__init__", "kind": "function", "doc": "<p>A class to contain a atlas of constituents.</p>\n\n<p>Args:</p>\n\n<ul>\n<li>database (Dict): Dictionary with constituents as key. The content should contain a <code>dataset.Dataset</code> object,\nif not a dataset object then it should contain a <code>fname</code> pointing to the dataset.</li>\n<li>grid_type (str): Type of the data grid.\n<ul>\n<li>'structured': contains a lon, lat dataset with amp(lat, lon), and pha(lat, lon)</li>\n<li>'points': constains a points dataset with amp(points), and pha(points)</li>\n</ul></li>\n<li>lon180 (bool): If want to custom load the dataset in -180/180 format (True), or the the dataset to be kept as is.</li>\n<li>units (Union[str, Dict], optional):dict of {'amp':'m', 'pha':'degrees'}. Defaults to 'auto'.</li>\n<li>variables (Union[str, Dict], optional): dict of {'amp':'amplitude', 'pha':'phase', 'lon':'lon', 'lat':'lat'}. \nDefaults to 'auto'.</li>\n</ul>\n\n<p>Raises:\n    NotImplementedError: Raises if the dataset for the grid_type is not implemented.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">database</span><span class=\"p\">:</span> <span class=\"n\">Dict</span>,</span><span class=\"param\">\t<span class=\"n\">grid_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">lon180</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">units</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;auto&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">variables</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;auto&#39;</span></span>)</span>"}, {"fullname": "pycaz.tide.atlas.Atlas.waves", "modulename": "pycaz.tide.atlas", "qualname": "Atlas.waves", "kind": "variable", "doc": "<p>List of waves in the Atlas dataset</p>\n\n<p>Returns:\n    list: List of waves</p>\n", "annotation": ": list"}, {"fullname": "pycaz.tide.atlas.Atlas.lon", "modulename": "pycaz.tide.atlas", "qualname": "Atlas.lon", "kind": "variable", "doc": "<p>Returns the longitude DataArray from the first dataset</p>\n\n<p>Returns:\n    xr.DataArray: Longitude data array</p>\n", "annotation": ": xarray.core.dataarray.DataArray"}, {"fullname": "pycaz.tide.atlas.Atlas.lat", "modulename": "pycaz.tide.atlas", "qualname": "Atlas.lat", "kind": "variable", "doc": "<p>Returns the longitude DataArray from the first dataset</p>\n\n<p>Returns:\n    xr.DataArray: Longitude data array</p>\n", "annotation": ": xarray.core.dataarray.DataArray"}, {"fullname": "pycaz.tide.atlas.Atlas.interp", "modulename": "pycaz.tide.atlas", "qualname": "Atlas.interp", "kind": "function", "doc": "<p>_summary_</p>\n\n<p>Args:</p>\n\n<ul>\n<li>xy (_type_, optional): _description_. Defaults to None.</li>\n<li>method (str, optional): _description_. Defaults to 'linear'.</li>\n</ul>\n\n<p>Returns:\n    Atlas: _description_</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">xy</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]]]]],</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">]],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">]]],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">]]]],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">]]]]],</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">,</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">]],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">]]],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">]]]],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">]]]]],</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">method</span><span class=\"o\">=</span><span class=\"s1\">&#39;linear&#39;</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pycaz</span><span class=\"o\">.</span><span class=\"n\">tide</span><span class=\"o\">.</span><span class=\"n\">atlas</span><span class=\"o\">.</span><span class=\"n\">Atlas</span>:</span></span>", "funcdef": "def"}, {"fullname": "pycaz.tide.atlas.Atlas.select", "modulename": "pycaz.tide.atlas", "qualname": "Atlas.select", "kind": "function", "doc": "<p>Selects a list of constituents from the atlas from the consts list.</p>\n\n<p>Args:\n    - consts (Union[List, Dict]): list of constants.</p>\n\n<p>Returns:\n    - Atlas: An Atlas with the selected consts</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">consts</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycaz.tide.atlas.Atlas.values", "modulename": "pycaz.tide.atlas", "qualname": "Atlas.values", "kind": "function", "doc": "<p>return a stacked dataset of the amplitudes for the given set of constituents.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">consts</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;auto&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycaz.tide.atlas.Atlas.to_netcdf", "modulename": "pycaz.tide.atlas", "qualname": "Atlas.to_netcdf", "kind": "function", "doc": "<p>Save the current atlas to a directory dir</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"nb\">dir</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">PathLike</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">suffix</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>, </span><span class=\"param\"><span class=\"n\">prefix</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycaz.tide.atlas.read_atlas", "modulename": "pycaz.tide.atlas", "qualname": "read_atlas", "kind": "function", "doc": "<p>Read an tidal atlas from <code>atlas_dir</code></p>\n\n<p>Args:</p>\n\n<ul>\n<li>atlas_dir (PathLike): Directory containing the tidal atlas.</li>\n<li>name_parser (Callable, optional): Name perser which extract the constituent name. Defaults to <code>name_parser</code>.</li>\n<li>ext (str, optional): Extensions of the file. Defaults to '.nc'.</li>\n<li>grid_type (str, optional): Name of the grid type, 'structured', 'points'. Defaults to 'structured'.</li>\n<li>lon180 (bool, optional): If lon to be changed from 0/360 to -180/180. Defaults to True.</li>\n<li>units (Union[str, dict], optional): dict of {'amp':'m', 'pha':'degrees'}. Defaults to 'auto'.</li>\n<li>variables (Union[str, dict], optional): dict of {'amp':'amplitude', 'pha':'phase', 'lon':'lon', 'lat':'lat'}. \nDefaults to 'auto'.</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>Atlas: A atlas dataset.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">atlas_dir</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">PathLike</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">name_parser</span><span class=\"p\">:</span> <span class=\"n\">Callable</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">function</span> <span class=\"n\">name_parser</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">ext</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;.nc&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">grid_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;structured&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">lon180</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">units</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;auto&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">variables</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;auto&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pycaz</span><span class=\"o\">.</span><span class=\"n\">tide</span><span class=\"o\">.</span><span class=\"n\">atlas</span><span class=\"o\">.</span><span class=\"n\">Atlas</span>:</span></span>", "funcdef": "def"}, {"fullname": "pycaz.tide.dataset", "modulename": "pycaz.tide.dataset", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pycaz.tide.dataset.Dataset", "modulename": "pycaz.tide.dataset", "qualname": "Dataset", "kind": "class", "doc": "<p>Helper class that provides a standard way to create an ABC using\ninheritance.</p>\n", "bases": "abc.ABC"}, {"fullname": "pycaz.tide.dataset.Dataset.interp", "modulename": "pycaz.tide.dataset", "qualname": "Dataset.interp", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycaz.tide.dataset.Dataset.to_netcdf", "modulename": "pycaz.tide.dataset", "qualname": "Dataset.to_netcdf", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycaz.tide.dataset.PointsDataset", "modulename": "pycaz.tide.dataset", "qualname": "PointsDataset", "kind": "class", "doc": "<p>Helper class that provides a standard way to create an ABC using\ninheritance.</p>\n", "bases": "Dataset"}, {"fullname": "pycaz.tide.dataset.PointsDataset.__init__", "modulename": "pycaz.tide.dataset", "qualname": "PointsDataset.__init__", "kind": "function", "doc": "<p>A class to contain the <code>amp</code> and <code>pha</code> on a list of <code>points</code>.</p>\n\n<p>Args:\n    dataset (xr.Dataset): xarray dataset containing the <code>amp</code> and <code>pha</code>.\n    units (dict): units dictionary, e.g., {'amp':'m', 'pha':'degrees'}</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dataset</span><span class=\"p\">:</span> <span class=\"n\">xarray</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">Dataset</span>, </span><span class=\"param\"><span class=\"n\">units</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span>)</span>"}, {"fullname": "pycaz.tide.dataset.PointsDataset.interp", "modulename": "pycaz.tide.dataset", "qualname": "PointsDataset.interp", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycaz.tide.dataset.PointsDataset.to_netcdf", "modulename": "pycaz.tide.dataset", "qualname": "PointsDataset.to_netcdf", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">fname</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycaz.tide.dataset.GriddedDataset", "modulename": "pycaz.tide.dataset", "qualname": "GriddedDataset", "kind": "class", "doc": "<p>Helper class that provides a standard way to create an ABC using\ninheritance.</p>\n", "bases": "Dataset"}, {"fullname": "pycaz.tide.dataset.GriddedDataset.__init__", "modulename": "pycaz.tide.dataset", "qualname": "GriddedDataset.__init__", "kind": "function", "doc": "<p>A class to contain the <code>amp</code> and <code>pha</code> on a regular <code>lat-lon</code> grid.</p>\n\n<p>Args:\n    dataset (xr.Dataset): xarray dataset containing the <code>amp</code> and <code>pha</code>.\n    units (dict): units dictionary, e.g., {'amp':'m', 'pha':'degrees'}</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dataset</span><span class=\"p\">:</span> <span class=\"n\">xarray</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">Dataset</span>, </span><span class=\"param\"><span class=\"n\">units</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span>)</span>"}, {"fullname": "pycaz.tide.dataset.GriddedDataset.interp", "modulename": "pycaz.tide.dataset", "qualname": "GriddedDataset.interp", "kind": "function", "doc": "<p>Interpolate to a grid or a list of points</p>\n\n<p>Args:\n    xy (Union[None, ArrayLike], optional): List of points. Defaults to None.\n    method (Literal['complex', 'linear', 'nearest'], optional): Method to use for interpolation. \n        Use 'complex' for interpolation using coupled interpolation method of Xu et al. \n        Defaults to 'linear'.\n    extrapolate (Literal['spherical', 'nearest'], optional): Controls how out of the bound interpolation is done. \n        'spherical' extrapolation goes around the grid for interpolation. Correct choice for global grid.\n        'nearest' extrapolation takes the nearest value for extrapolation.\n        Defaults to 'spherical'.\n    **kwargs: 'lon', 'lat' values for interpolate in a grid defined by provided values. xy must be None in this case.</p>\n\n<p>Raises:\n    Exception: if xy is None, **kwargs must contain one of both of <code>lon</code> and <code>lat</code></p>\n\n<p>Returns:\n    Dataset: _description_</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">xy</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]]]]],</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">]],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">]]],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">]]]],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">]]]]],</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">,</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">]],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">]]],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">]]]],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">]]]]]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">method</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Literal[(&#39;complex&#39;, &#39;linear&#39;, &#39;nearest&#39;)]&quot;</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;linear&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">extrapolate</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Literal[(&#39;spherical&#39;, &#39;nearest&#39;)]&quot;</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;spherical&#39;</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pycaz</span><span class=\"o\">.</span><span class=\"n\">tide</span><span class=\"o\">.</span><span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">Dataset</span>:</span></span>", "funcdef": "def"}, {"fullname": "pycaz.tide.dataset.GriddedDataset.sel", "modulename": "pycaz.tide.dataset", "qualname": "GriddedDataset.sel", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">xy</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycaz.tide.dataset.GriddedDataset.isel", "modulename": "pycaz.tide.dataset", "qualname": "GriddedDataset.isel", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">ij</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycaz.tide.dataset.GriddedDataset.to_netcdf", "modulename": "pycaz.tide.dataset", "qualname": "GriddedDataset.to_netcdf", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">fname</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">PathLike</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycaz.tide.dataset.read_gridded_dataset", "modulename": "pycaz.tide.dataset", "qualname": "read_gridded_dataset", "kind": "function", "doc": "<p>Read a gridded netcdf tidal dataset</p>\n\n<p>Args:\n    fname (PathLike): File path.\n    lon180 (bool, optional): Convert to longitude convention -180/180 if True. Defaults to False.\n    units (Union[str, dict], optional): Dict with units. \n        Example - {'amp':'m', 'pha':'degrees'}. \n        Defaults to 'auto'.\n    variables (Union[str, dict], optional): Dict with variable mapping. \n        Example - {'amp':'amplitude', 'pha':'phase', 'lon':'lon', 'lat':'lat'}\n        Defaults to 'auto'.</p>\n\n<p>Raises:\n    Exception: if variable={...}, it sould contain 'amp', 'pha', 'lon', 'lat'\n    Exception: allowed pha units are - 'degrees', 'radians'</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">fname</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">PathLike</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">lon180</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">units</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;auto&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">variables</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;auto&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycaz.tide.dataset.read_points_dataset", "modulename": "pycaz.tide.dataset", "qualname": "read_points_dataset", "kind": "function", "doc": "<p>TODO: Implement a points reader, not urgent</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycaz.tide.filters", "modulename": "pycaz.tide.filters", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pycaz.tide.filters.apply_filter", "modulename": "pycaz.tide.filters", "qualname": "apply_filter", "kind": "function", "doc": "<p>Apply tide filter. \nTODO: Warn if not hourly data.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">inarray</span>, </span><span class=\"param\"><span class=\"n\">filtername</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycaz.tide.interpolate", "modulename": "pycaz.tide.interpolate", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pycaz.tide.interpolate.interp_complex_1D", "modulename": "pycaz.tide.interpolate", "qualname": "interp_complex_1D", "kind": "function", "doc": "<p>Interpolate amplitude and phase in 1D between two sorrounding point.\n:x: x\n:bnds: [x1, x2]\n:amp_pha: [[amp_x1, pha_x1], [amp_x2, pha_x2]]\n:pha_unit: 'degrees', 'radians'</p>\n\n<p>:output: [amp_x, pha_x]</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">bnds</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]]]]],</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">]],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">]]],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">]]]],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">]]]]],</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">,</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">]],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">]]],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">]]]],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">]]]]]]</span>,</span><span class=\"param\">\t<span class=\"n\">amp_pha</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]]]]],</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">]],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">]]],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">]]]],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">]]]]],</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">,</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">]],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">]]],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">]]]],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">]]]]]]</span>,</span><span class=\"param\">\t<span class=\"n\">pha_unit</span><span class=\"o\">=</span><span class=\"s1\">&#39;degrees&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "pycaz.tide.interpolate.interp_complex_2D", "modulename": "pycaz.tide.interpolate", "qualname": "interp_complex_2D", "kind": "function", "doc": "<p>:xy: [x, y]\n:bnds: [[w, s], [e, s], [e, n], [w, n]] -> counter-clockwise\n:amp_pha: [[amp_ws, pha_ws], [amp_es, pha_es], [amp_en, pha_en], [amp_wn, pha_wn]]</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">xy</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]]]]],</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">]],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">]]],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">]]]],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">]]]]],</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">,</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">]],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">]]],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">]]]],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">]]]]]]</span>,</span><span class=\"param\">\t<span class=\"n\">bnds</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]]]]],</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">]],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">]]],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">]]]],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">]]]]],</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">,</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">]],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">]]],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">]]]],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">]]]]]]</span>,</span><span class=\"param\">\t<span class=\"n\">amp_pha</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]]]]],</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">]],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">]]],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">]]]],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">]]]]],</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">,</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">]],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">]]],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">]]]],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">]]]]]]</span>,</span><span class=\"param\">\t<span class=\"n\">pha_unit</span><span class=\"o\">=</span><span class=\"s1\">&#39;degrees&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "pycaz.tide.interpolate.interp_complex_tri", "modulename": "pycaz.tide.interpolate", "qualname": "interp_complex_tri", "kind": "function", "doc": "<p>TODO: Implement the triangular interpolation schemes from pycaz/pyschism (old) scripts</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">xy</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]]]]],</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">]],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">]]],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">]]]],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">]]]]],</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">,</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">]],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">]]],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">]]]],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">]]]]]]</span>,</span><span class=\"param\">\t<span class=\"n\">bnds</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]]]]],</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">]],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">]]],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">]]]],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">]]]]],</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">,</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">]],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">]]],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">]]]],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">]]]]]]</span>,</span><span class=\"param\">\t<span class=\"n\">amp_pha</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]]]]],</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">]],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">]]],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">]]]],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">]]]]],</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">,</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">]],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">]]],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">]]]],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">]]]]]]</span>,</span><span class=\"param\">\t<span class=\"n\">pha_unit</span><span class=\"o\">=</span><span class=\"s1\">&#39;degrees&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycaz.tide.interpolate1", "modulename": "pycaz.tide.interpolate1", "kind": "module", "doc": "<p>Interpolation of Amplitude and Phase using the interpolant derived by Zhigang Xu.\nFor details see - <a href=\"https://doi.org/10.1007/s10236-017-1122-8\">https://doi.org/10.1007/s10236-017-1122-8</a></p>\n\n<p>TODO:\n    * Add a wrapper class\n    * Add type and error check\n    * Add case for missing value</p>\n\n<p>Author: khan</p>\n"}, {"fullname": "pycaz.tide.interpolate1.Point", "modulename": "pycaz.tide.interpolate1", "qualname": "Point", "kind": "class", "doc": "<p>Point(x, y=0, a=None, p=None, isradians=False) is point object to hold point information\nincluding the amplitude and phase.</p>\n\n<p>args:\n    x (float)       :   x position\n    y (float)       :   y position\n    a (float)       :   amplitude\n    p (float)       :   phase in degree or radians (default: degrees)\n    isradians (bool):   if input is in degrees or radians (default: false)</p>\n\n<p>returns:\n    An instance of Point class.</p>\n\n<p>attributes:\n    x (float)       : x position\n    y (float)       : y position\n    a (float)       : amplitude\n    p (float)       : phase in radians</p>\n\n<p>methods:\n    print() : prints the attributes</p>\n\n<p>TODO:\n    * add typecheck and error handling</p>\n"}, {"fullname": "pycaz.tide.interpolate1.Point.__init__", "modulename": "pycaz.tide.interpolate1", "qualname": "Point.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span><span class=\"o\">=</span><span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">a</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">p</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">isradians</span><span class=\"o\">=</span><span class=\"kc\">False</span></span>)</span>"}, {"fullname": "pycaz.tide.interpolate1.Point.print", "modulename": "pycaz.tide.interpolate1", "qualname": "Point.print", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycaz.tide.interpolate1.Grid", "modulename": "pycaz.tide.interpolate1", "qualname": "Grid", "kind": "class", "doc": "<p>Grid(x, y, A=None, P=None, isradians=False) is the grid object to hold points in a meshgrid.</p>\n\n<p>args:\n    x ([float])         : x positon array in the structured grid\n    y ([float])         : y position array in the structured grid</p>\n\n<pre><code>A ([[float]])       : 2D array of size (x, y) containing amplitude\nP ([[float]])       : 2D array of size (x, y) containing phase\nisradians (bool)    : if the phase in in radians\n</code></pre>\n"}, {"fullname": "pycaz.tide.interpolate1.Grid.__init__", "modulename": "pycaz.tide.interpolate1", "qualname": "Grid.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">A</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">P</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">isradians</span><span class=\"o\">=</span><span class=\"kc\">False</span></span>)</span>"}, {"fullname": "pycaz.tide.interpolate1.Grid.getpoints", "modulename": "pycaz.tide.interpolate1", "qualname": "Grid.getpoints", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">reshaped</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycaz.tide.interpolate1.Grid.getx", "modulename": "pycaz.tide.interpolate1", "qualname": "Grid.getx", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">reshaped</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycaz.tide.interpolate1.Grid.gety", "modulename": "pycaz.tide.interpolate1", "qualname": "Grid.gety", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">reshaped</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycaz.tide.interpolate1.Grid.getamplitude", "modulename": "pycaz.tide.interpolate1", "qualname": "Grid.getamplitude", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">reshaped</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycaz.tide.interpolate1.Grid.getphase", "modulename": "pycaz.tide.interpolate1", "qualname": "Grid.getphase", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">reshaped</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">degrees</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycaz.tide.interpolate1.Grid.print", "modulename": "pycaz.tide.interpolate1", "qualname": "Grid.print", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">degrees</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycaz.tide.interpolate1.Grid.plot", "modulename": "pycaz.tide.interpolate1", "qualname": "Grid.plot", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">degrees</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycaz.tide.interpolate1.Interpolator1D", "modulename": "pycaz.tide.interpolate1", "qualname": "Interpolator1D", "kind": "class", "doc": "<p>Interpolator1D(points, axis=1, sort=True) creates the 1-D interpolation\nobject using the given points of amplitudes and phases.</p>\n\n<p>args:\n    points ([Point]) : Array of given points\n    axis ([1, 2]) : along which axis the interpolation will be done\n                    1 : x axis\n                    2 : y axis\n    sort (boolean) : if sorting of the points is needed.\n                    Set to True if the points are not structured\n                    Set to False if the points are structured</p>\n"}, {"fullname": "pycaz.tide.interpolate1.Interpolator1D.__init__", "modulename": "pycaz.tide.interpolate1", "qualname": "Interpolator1D.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">points</span>, </span><span class=\"param\"><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">1</span>, </span><span class=\"param\"><span class=\"n\">sort</span><span class=\"o\">=</span><span class=\"kc\">True</span></span>)</span>"}, {"fullname": "pycaz.tide.interpolate1.Interpolator1D.findindices", "modulename": "pycaz.tide.interpolate1", "qualname": "Interpolator1D.findindices", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">point</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycaz.tide.interpolate1.Interpolator1D.genweight", "modulename": "pycaz.tide.interpolate1", "qualname": "Interpolator1D.genweight", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">point</span>, </span><span class=\"param\"><span class=\"n\">indices</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycaz.tide.interpolate1.Interpolator1D.interpolate", "modulename": "pycaz.tide.interpolate1", "qualname": "Interpolator1D.interpolate", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">point</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycaz.tide.interpolate1.Interpolator2D", "modulename": "pycaz.tide.interpolate1", "qualname": "Interpolator2D", "kind": "class", "doc": "<p>Interpolator2D(grid) create the 2D interpolator from the given grid.</p>\n\n<p>args:\n    grid (Grid) :   Grid object containing amplitude and phase from which\n                    the interpolation will be made</p>\n"}, {"fullname": "pycaz.tide.interpolate1.Interpolator2D.__init__", "modulename": "pycaz.tide.interpolate1", "qualname": "Interpolator2D.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">grid</span></span>)</span>"}, {"fullname": "pycaz.tide.interpolate1.Interpolator2D.interpolatepoint", "modulename": "pycaz.tide.interpolate1", "qualname": "Interpolator2D.interpolatepoint", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">point</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycaz.tide.interpolate1.Interpolator2D.interpolategrid", "modulename": "pycaz.tide.interpolate1", "qualname": "Interpolator2D.interpolategrid", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">grid</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycaz.tide.utide", "modulename": "pycaz.tide.utide", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pycaz.tide.utide.utide_names", "modulename": "pycaz.tide.utide", "qualname": "utide_names", "kind": "function", "doc": "<p>Returns mapped utide constituents and missing constituents</p>\n\n<p>Returns the constituent names as found in utide as a {const:utide_const} dictionary. A second list is returned\nwith names that are not found.</p>\n\n<p>Args:\n    consts (ArrayLike): A constituent name, or a list of constituents names</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">consts</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]]]]],</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">]],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">]]],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">]]]],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">]]]]],</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">,</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">]],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">]]],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">]]]],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">]]]]]]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycaz.tide.utide.utide_freqs", "modulename": "pycaz.tide.utide", "qualname": "utide_freqs", "kind": "function", "doc": "<p>Returns the frequency of the constituents in cycle/hour</p>\n\n<p>Args:\n    consts (ArrayLike): A constituent name, or a list of constituents name</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">consts</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]]]]],</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">]],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">]]],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">]]]],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">]]]]],</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">,</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">]],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">]]],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">]]]],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">]]]]]]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycaz.tide.utide.utide_lind", "modulename": "pycaz.tide.utide", "qualname": "utide_lind", "kind": "function", "doc": "<p>Return the internal indices of utide constituents. </p>\n\n<p>This is useful for getting the right output from various utide routines. The consts list should only contain utide \nnames. use <code>utide_names</code> to find available names.</p>\n\n<p>Args:\n    consts (Union[dict, ArrayLike]): A constituent name, or a list of constituents names</p>\n\n<p>Raises:\n    TypeError: <code>consts</code> should be list of dict type</p>\n\n<p>Returns:\n    list: utide internal indices for the consts</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">consts</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">,</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]]]]],</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">]],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">]]],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">]]]],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">]]]]],</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">,</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">]],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">]]],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">]]]],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">]]]]]]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "pycaz.tide.utide.grid_FUV", "modulename": "pycaz.tide.utide", "qualname": "grid_FUV", "kind": "function", "doc": "<p>Compute the Nodal correction on grid</p>\n\n<p>Compute the Nodal correction to amplitude (F), phase (U), and the equilibrium argument(V) for the whole list of \nconstituent from utide at a given time t for a list of lat values. Adopted from utide.harmonics.FUV()</p>\n\n<p>Args:\n    timestamp (TimestampConvertibleTypes): <strong>single timestamp</strong>\n        Any formatted string 'yyyy-mm-dd HH:MM:SS', numpy.datetime64, pandas.datetime\n    lat (Union[float, ArrayLike]): Latitude\n    consts (Union[None, ArrayLike], optional): Constituent list.. Defaults to None.</p>\n\n<p>Raises:\n    Exception: If len(t) &gt; 1</p>\n\n<p>Returns:\n    typing.Tuple[ArrayLike, ArrayLike, ArrayLike]: (F, U, V)\n        F (nwaves, nlat): Nodal correction to amplitude (unitless multiplier), \n        U (nwaves, nlat): Nodal correction to phase (cycle)\n        V (nwaves, nlat): Equilibrium argument (cycle)</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">timestamp</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Timestamp&#39;</span><span class=\"p\">),</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">datetime64</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">int64</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">lat</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]]]]],</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">]],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">]]],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">]]]],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">]]]]],</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">,</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">]],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">]]],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">]]]],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">]]]]]]</span>,</span><span class=\"param\">\t<span class=\"n\">consts</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]]]]],</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">]],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">]]],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">]]]],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">]]]]],</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">,</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">]],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">]]],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">]]]],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">]]]]]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "pycaz.tide.utide.nodal_factor", "modulename": "pycaz.tide.utide", "qualname": "nodal_factor", "kind": "function", "doc": "<p>Compute the nodal correction, and astronomical argument at time t using the ut_FUV() in utide.</p>\n\n<p>Returns: Dictionary of Nodal correction, Astronomical argument for each constituent</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">t</span>, </span><span class=\"param\"><span class=\"n\">consts</span>, </span><span class=\"param\"><span class=\"n\">lat</span>, </span><span class=\"param\"><span class=\"n\">correct_phase</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycaz.tide.utide.reconstruct_waterlevel", "modulename": "pycaz.tide.utide", "qualname": "reconstruct_waterlevel", "kind": "function", "doc": "<p>Reconstruct waterlevel from an atlas</p>\n\n<p>Args:\n    fname (PathLike): File path for saving the reconstructed water levels\n    atlas (Atlas): A tidal atlas\n    timestamps (ArrayLike): A series of times when the water levels are to be reconstructed.\n    epoch (Union[None, TimestampConvertibleTypes], optional): Epoch to be used in the output nc file. Defaults to None.</p>\n\n<p>Raises:\n    Exception: <code>epoch</code> should be a TimestampConvertibleTypes</p>\n\n<p>Returns:\n    xr.Dataset: The reconstructed dataset</p>\n\n<p>TODO: Reorganize the netcdf dataset creation process</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">fname</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">PathLike</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">atlas</span><span class=\"p\">:</span> <span class=\"n\">pycaz</span><span class=\"o\">.</span><span class=\"n\">tide</span><span class=\"o\">.</span><span class=\"n\">atlas</span><span class=\"o\">.</span><span class=\"n\">Atlas</span>,</span><span class=\"param\">\t<span class=\"n\">timestamps</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]]]]],</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">]],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">]]],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">]]]],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">]]]]],</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">,</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">]],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">]]],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">]]]],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">]]]]]]</span>,</span><span class=\"param\">\t<span class=\"n\">epoch</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;Timestamp&#39;</span><span class=\"p\">),</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">datetime64</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">int64</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">xarray</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">Dataset</span>:</span></span>", "funcdef": "def"}, {"fullname": "pycaz.tide.utilities", "modulename": "pycaz.tide.utilities", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pycaz.tide.utilities.grid_around", "modulename": "pycaz.tide.utilities", "qualname": "grid_around", "kind": "function", "doc": "<p>Returns the sorrounding grid nodes.</p>\n\n<p>Finds the sorrounding nodes from the structured grid defined by <code>grid_lon</code> and <code>grid_lat</code> at the location defined \nby <code>point_lon</code>, <code>point_lat</code>. The returning results are a tuple [[lon_west, lon_east], [lat_south, lat_north]]</p>\n\n<p>If <code>extrapolate</code> is <code>spherical</code>, then the west and south rounds the world. For example, if a point (lon=0.01) is \nchosen in a lon grid [0.025, 360], then the right side of the grid pixel will be 0.025, and the left pixel will be 360.</p>\n\n<p>If <code>extrapolate</code> is <code>nearest</code>, it will just select the nearest neighbour.</p>\n\n<p>Args:\n    xy (ArrayLike): Point location [x, y]\n    grid_x (ArrayLike): Grid x points list\n    grid_y (ArrayLike): Grid y points list\n    extrapolate (Literal['spherical', 'nearest'], optional): Extrapolate method. Defaults to 'spherical'.</p>\n\n<p>Returns:\n    np.ndarray: [[lon_west, lon_east], [lat_south, lat_north]]</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">xy</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]]]]],</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">]],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">]]],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">]]]],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">]]]]],</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">,</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">]],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">]]],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">]]]],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">]]]]]]</span>,</span><span class=\"param\">\t<span class=\"n\">grid_x</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]]]]],</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">]],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">]]],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">]]]],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">]]]]],</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">,</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">]],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">]]],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">]]]],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">]]]]]]</span>,</span><span class=\"param\">\t<span class=\"n\">grid_y</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]]]]],</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">]],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">]]],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">]]]],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">_array_like</span><span class=\"o\">.</span><span class=\"n\">_SupportsArray</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">]]]]],</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">,</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">]],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">]]],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">]]]],</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">complex</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">]]]]]]</span>,</span><span class=\"param\">\t<span class=\"n\">extrapolate</span><span class=\"p\">:</span> <span class=\"n\">typing_extensions</span><span class=\"o\">.</span><span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"s1\">&#39;spherical&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;nearest&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;spherical&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "pycaz.tide.utilities.tri_around", "modulename": "pycaz.tide.utilities", "qualname": "tri_around", "kind": "function", "doc": "<p>Finds the sorroundig nodes in a triangular mesh.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">xy</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">triang</span><span class=\"p\">:</span> <span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">tri</span><span class=\"o\">.</span><span class=\"n\">triangulation</span><span class=\"o\">.</span><span class=\"n\">Triangulation</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "pycaz.webdata", "modulename": "pycaz.webdata", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pycaz.webdata.gfs", "modulename": "pycaz.webdata.gfs", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pycaz.webdata.gfs.GFS_0p25_hourly", "modulename": "pycaz.webdata.gfs", "qualname": "GFS_0p25_hourly", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "pycaz.webdata.gfs.GFS_0p25_hourly.__init__", "modulename": "pycaz.webdata.gfs", "qualname": "GFS_0p25_hourly.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">localdir</span><span class=\"o\">=</span><span class=\"s1\">&#39;./&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">dataurl</span><span class=\"o\">=</span><span class=\"s1\">&#39;http://nomads.ncep.noaa.gov:80/dods/gfs_0p25_1hr&#39;</span></span>)</span>"}, {"fullname": "pycaz.webdata.gfs.GFS_0p25_hourly.query", "modulename": "pycaz.webdata.gfs", "qualname": "GFS_0p25_hourly.query", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycaz.webdata.gfs.GFS_0p25_hourly.download", "modulename": "pycaz.webdata.gfs", "qualname": "GFS_0p25_hourly.download", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycaz.webdata.hwrf", "modulename": "pycaz.webdata.hwrf", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pycaz.webdata.hwrf.NOAA_HWRF", "modulename": "pycaz.webdata.hwrf", "qualname": "NOAA_HWRF", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "pycaz.webdata.hwrf.NOAA_HWRF.__init__", "modulename": "pycaz.webdata.hwrf", "qualname": "NOAA_HWRF.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">localdir</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;./hwrf&#39;</span>, </span><span class=\"param\"><span class=\"n\">year</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">2022</span>, </span><span class=\"param\"><span class=\"n\">basin</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;NIO&#39;</span></span>)</span>"}, {"fullname": "pycaz.webdata.hwrf.NOAA_HWRF.query", "modulename": "pycaz.webdata.hwrf", "qualname": "NOAA_HWRF.query", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pycaz.webdata.hwrf.NOAA_HWRF.download", "modulename": "pycaz.webdata.hwrf", "qualname": "NOAA_HWRF.download", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();